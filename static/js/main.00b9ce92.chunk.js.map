{"version":3,"sources":["components/ClickItem/index.js","components/Container/index.js","components/NewGame/index.js","App.js","index.js"],"names":["ClickItem","props","src","image","role","onClick","handleClick","id","className","Container","children","NewGame","state","data","score","topScore","handleCorrectGuess","newData","console","log","newScore","newTopScore","Math","max","setState","shuffle","handleIncorrectGuess","resetData","map","item","clicked","array","sort","random","handleItemClick","guessedCorretly","newItem","this","key","shake","Component","App","ReactDOM","render","document","getElementById"],"mappings":"o6BAaeA,MAXf,SAAmBC,GACf,OACI,yBAAKC,IAAKD,EAAME,MACZC,KAAK,MACLC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMM,KACvCC,UAAU,YCAPC,MAJf,SAAmBR,GACf,OAAO,0BAAMO,UAAU,aAAaP,EAAMS,W,okBCqF/BC,E,2MAlFXC,MAAQ,CACJC,OACAC,MAAO,EACPC,SAAU,G,EAOdC,mBAAqB,SAAAC,GACjBC,QAAQC,IAAI,qBACZD,QAAQC,IAAIN,GAFgB,MAGA,EAAKD,MAAzBG,EAHoB,EAGpBA,SACFK,EAJsB,EAGVN,MACO,EACnBO,EAAcC,KAAKC,IAAIH,EAAUL,GAEvC,EAAKS,SAAS,CACVX,KAAM,EAAKY,QAAQR,GACnBH,MAAOM,EACPL,SAAUM,K,EAIlBK,qBAAuB,SAAAb,GACnB,EAAKW,SAAS,CACVX,KAAM,EAAKc,UAAUd,GACrBC,MAAO,K,EAIfa,UAAY,SAAAd,GACR,IAAMc,EAAYd,EAAKe,KAAI,SAAAC,GAAI,YAAUA,EAAV,CAAgBC,SAAS,OACxD,OAAO,EAAKL,QAAQE,I,EAGxBF,QAAU,SAACM,GAGP,OAFAA,EAAMC,MAAK,kBAAMV,KAAKW,SAAW,MAE1BF,G,EAGXG,gBAAkB,SAAA3B,GACd,IAAI4B,GAAkB,EAChBlB,EAAU,EAAKL,MAAMC,KAAKe,KAAI,SAAAC,GAChC,IAAMO,EAAO,KAAQP,GAOrB,OANIO,EAAQ7B,KAAOA,IACV6B,EAAQN,UACTM,EAAQN,SAAU,EAClBK,GAAkB,IAGnBC,KAEXlB,QAAQC,IAAIF,GACZkB,EAAkB,EAAKnB,mBAAmBC,GAAW,EAAKS,qBAAqBT,I,qHAIzE,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,KACKoB,KAAKzB,MAAMC,KAAKe,KAAI,SAAAC,GAAI,OACrB,kBAAC,EAAD,CAAWS,IAAKT,EAAKtB,GACjBA,GAAIsB,EAAKtB,GACTgC,OAAQ,EAAK3B,MAAME,OAAS,EAAKF,MAAMG,SACvCT,YAAa,EAAK4B,gBAClB/B,MAAO0B,EAAK1B,YAGxB,6BACI,oCAAUkC,KAAKzB,MAAME,OACrB,uCAAauB,KAAKzB,MAAMG,gB,GA1EtByB,a,MCSPC,MATf,WACE,OACE,6BAEE,kBAAC,EAAD,QCLNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.00b9ce92.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css'\nfunction ClickItem(props) {\n    return (\n        <img src={props.image}\n            role=\"img\"\n            onClick={() => props.handleClick(props.id)}\n            className=\"allImg\"\n        />\n\n    )\n}\n\nexport default ClickItem;","import React from \"react\";\n\n\nfunction Container(props) {\n    return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;","import React, { Component } from 'react'\nimport ClickItem from '../ClickItem';\nimport Container from \"../Container\";\nimport data from \"../../data.json\";\n\n\nclass NewGame extends Component {\n    state = {\n        data,\n        score: 0,\n        topScore: 0\n    };\n\n    componentDidMount() {\n        // this.setState({ data: this.shuffle(this.state.data) });\n    };\n    \n    handleCorrectGuess = newData => {\n        console.log(\"Guessed Correctly\")\n        console.log(data)\n        const { topScore, score } = this.state;\n        const newScore = score + 1;\n        const newTopScore = Math.max(newScore, topScore);\n\n        this.setState({\n            data: this.shuffle(newData),\n            score: newScore,\n            topScore: newTopScore\n        });\n    };\n\n    handleIncorrectGuess = data => {\n        this.setState({\n            data: this.resetData(data),\n            score: 0\n        });\n    };\n\n    resetData = data => {\n        const resetData = data.map(item => ({ ...item, clicked: false }));\n        return this.shuffle(resetData);\n    }\n\n    shuffle = (array) => {\n        array.sort(() => Math.random() - 0.5);\n        \n        return array\n      }\n\n    handleItemClick = id => {\n        let guessedCorretly = false;\n        const newData = this.state.data.map(item => {\n            const newItem = { ...item };\n            if (newItem.id === id) {\n                if (!newItem.clicked) {\n                    newItem.clicked = true;\n                    guessedCorretly = true;\n                }\n            }\n            return newItem;\n        });\n        console.log(newData)\n        guessedCorretly ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n    };\n\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    {this.state.data.map(item => (\n                        <ClickItem key={item.id}\n                            id={item.id}\n                            shake={!this.state.score && this.state.topScore}\n                            handleClick={this.handleItemClick}\n                            image={item.image} />\n                    ))}\n                </Container>\n                <div>\n                    <p>Score:{this.state.score}</p>\n                    <p>TopScore:{this.state.topScore}</p>\n                </div>\n            </div>\n        )\n    }\n\n\n}\n\nexport default NewGame;","import React from 'react';\nimport './App.css';\nimport NewGame from \"./components/NewGame\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Card from 'react-bootstrap/Card'\n\nfunction App() {\n  return (\n    <div>\n\n      <NewGame />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}